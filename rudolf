#!/usr/bin/env php
<?php

define('ROOT', __DIR__);
define('WEB_ROOT', ROOT.'/src/');

if (!file_exists('composer.json')) {
    echo out('Must be execute in rudolf root! (where is composer.json)', 'red', true);
    die;
}

include __DIR__.'/src/app/defines.php';

switch (isset($argv[1]) ? $argv[1] : 'help') {
    case 'install':
        install();
        break;

    case 'clear-cache':
        clearCache();
        break;

    case 'update':
        update();
        break;

    case 'help':
    default:
        help();
        break;
}

/**
 * Install rudolf.
 */
function install()
{
    if (file_exists('config')) {
        echo out('Rudolf already installed!', 'red').PHP_EOL;
        die;
    }

    echo out('Creating catalogs...', 'green');
    mkdir('src/config');
    mkdir('src/content');
    mkdir('src/content/plugins');
    mkdir('src/content/themes');
    mkdir('src/content/themes/admin');
    mkdir('src/content/themes/front');
    mkdir('src/content/uploads');
    mkdir('src/log');
    mkdir('src/temp');
    echo out(' done.', null, true);

    echo out('Copy config examples...', 'green');
    system('cp -r src/app/install/config.example/* src/config/');
    echo out(' done.', null, true);

    echo PHP_EOL;

    echo out('Database configuration:', 'green', true);
    echo out('- Engine [').out('mysql', 'brown').']: ';
    $db['engine'] = in('mysql');
    echo out('- Host [').out('localhost', 'brown').']: ';
    $db['host'] = in('localhost');
    echo out('- Database name [').out('rudolf', 'brown').']: ';
    $db['database'] = in('rudolf');
    echo out('- User name [').out('rudolf', 'brown').']: ';
    $db['user'] = in('rudolf');
    echo out('- Pass [').out('rudolf', 'brown').']: ';
    $db['pass'] = in('rudolf');
    echo out('- Charset [').out('utf8', 'brown').']: ';
    $db['charset'] = in('utf8');
    echo out('- Prefix [').out('rudolf_', 'brown').']: ';
    $db['prefix'] = in('rudolf_');
    file_put_contents('src/config/database.php', '<?php return '.var_export($db, true).';');
    echo out('saved.', 'green', true);

    echo PHP_EOL;

    echo out('Site configuration:', 'green', true);
    echo out('- Front theme name [').out('reindeer', 'brown').']: ';
    $site['front_theme'] = in('reindeer');
    echo out('- Admin theme name [').out('dasher', 'brown').']: ';
    $site['admin_theme'] = in('dasher');
    echo out('- General site name [').out('Welcome in rudolf!', 'brown').']: ';
    $site['general_name'] = in('Welcome in rudolf!');
    echo out('- Debug on [').out('0', 'brown').']: ';
    $site['debug'] = in('0');
    file_put_contents('src/config/site.php', '<?php return '.var_export($site, true).';');
    echo out('saved.', 'green', true);

    echo PHP_EOL;

    file_put_contents('src/config/auth.php', '<?php return '.var_export([
        'site_key' => randString(64),
        'session_expire' => '+1 month',
    ], true).';');

    composer('install');
}

/**
 * Clear cache.
 */
function clearCache()
{
    echo out('Clear temp...', 'green');
    system('rm -rf '.ROOT.'/src/temp/*');
    echo out(' done.', null, true);
}

/**
 * Update rudolf.
 */
function update()
{
    if (!file_exists(ROOT.'/src/config')) {
        echo out('Rudolf not installed!', 'red').PHP_EOL;
        die;
    }

    composer('update');
}

/**
 * Display help message.
 */
function help()
{
    fwrite(STDERR,
        out(NAME, 'green').' '.out(VER_NAME, 'brown', true).
        PHP_EOL.
        out('Usage:', 'brown', true).
        '  command [command]'.PHP_EOL.
        PHP_EOL.
        out('Available commands:', 'brown', true).
        '  '.out('clear-cache', 'green').'  clear temp/ directory'.PHP_EOL.
        '  '.out('help', 'green').'         display this message'.PHP_EOL.
        '  '.out('install', 'green').'      install rudolf, if not installed yet'.PHP_EOL.
        '  '.out('update', 'green').'       update packages, modules and plugins'.PHP_EOL
    );
}

/**
 * Composer helper.
 */
function composer($command = 'update')
{
    if (!('update' === $command or 'install' === $command)) {
        return;
    }
    if (!file_exists(ROOT.'/composer.phar')) {
        echo out('Downloading composer...', 'green');
        copy('https://getcomposer.org/installer', ROOT.'/composer-setup.php');
        echo out(' done.', null, true);

        echo out('Installing composer...', 'green');
        system('php '.ROOT.'/composer-setup.php --quiet');
        unlink(ROOT.'/composer-setup.php');
        echo out(' done.', null, true);
    }

    if ('install' == $command) {
        echo out('Instaling composer packages...', 'green');

    } else {
        echo out('Updating composer packages...', 'green');
    }

    $config = include ROOT.'/src/config/site.php';
    if ('0' == $config['debug']) {
        $command .= ' --no-dev ';
        $command .= ' --optimize-autoloader ';
    }

    system('php '.ROOT.'/composer.phar '.$command.' --quiet');
    echo out(' done.', null, true);

    echo out('Removing composer.phar...', 'green');
    unlink(ROOT.'/composer.phar');
    echo out(' done.', null, true);
}

/**
 * Colorize output.
 *
 * @param string $text    Text to colorize
 * @param mixed  $color   Color style
 * @param bool   $newLine
 */
function out($text, $color = null, $newLine = false)
{
    $colors = [
        'black' => '0;30',
        'red' => '0;31',
        'green' => '0;32',
        'brown' => '0;33',
        'blue' => '0;34',
        'purple' => '0;35',
        'cyan' => '0;36',
        'light_gray' => '0;37',
        'dark_gray' => '1;30',
        'light_red' => '1;31',
        'light_green' => '1;32',
        'yellow' => '1;33',
        'light_blue' => '1;34',
        'light_purple' => '1;35',
        'light_cyan' => '1;36',
        'white' => '1;37',
    ];

    if (isset($colors[$color])) {
        $format = str_replace('{color}', $colors[$color], "\e[{color}m%s\e[0m");
    } else {
        $format = '%s';
    }

    if ($newLine) {
        $format .= PHP_EOL;
    }

    return sprintf($format, $text);
}

/**
 * Return input string or default.
 *
 * @param mixed $default Set default
 */
function in($default = null)
{
    $input = trim(fgets(STDIN));
    if (empty($input)) {
        return $default;
    }

    return $input;
}

/**
 * Get random string.
 *
 * @param int    $lenght  Random string lenght
 * @param string $charset
 *
 * @see http://stackoverflow.com/a/853870/6695449
 */
function randString($length, $charset = null)
{
    if (!$charset) {
        $charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~!@#$%^&*()_+<>?:"{}|';
    }
    $str = '';
    $count = strlen($charset);
    while ($length--) {
        $str .= $charset[mt_rand(0, $count - 1)];
    }

    return $str;
}
